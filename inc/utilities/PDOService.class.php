<?php 

class PDOService {

    // Important Database Connection Properties
    private $_host = DB_HOST;
    private $_user = DB_USER;
    private $_pass = DB_PASS;
    private $_dbname = DB_NAME;

    //Store the class name we are going to map to
    private $_className;

    //Store an instance of the PDO library
    private $_dbh;

    //Store the error
    private $_error;

    // Prepared Stmt
    private $_pstmt;

    // Overriding the default constructor and specifying the name of the class we want return
    public function PDOService (string $className){
        // Record the class name
        $this->_className = $className;

        // Connection String 
        $con_str = 'mysql:host='.$this->_host.';dbname='.$this->_dbname;

        // Setup some PDO options
        $options = array (PDO::ATTR_PERSISTENT => true,
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION);
        
        // Connect
        try{
            // Create the internal instance of PDO ($_dbh)
            // Need Connection string, user password options
            $this->_dbh = new PDO($con_str, $this->_user, $this->_pass, $options);

        } catch (PDOException $e){
            //If there was an error:
            $this->error = $e->getMessage();
            echo $e->getMessage();
        }
    }

    // Query
    public function query($sql){
        // Create a prepared stmt from the SQL query
        // Store the new prepared stmt object in $this->_pstmt

        $this->_pstmt = $this->_dbh->prepare($sql);
    }

    // Bind (bind parameters for the prepared stmt)
    public function bind($param, $value, $type=null){

        // If the type was set to Null
        if(is_null($type)){
            // Auto set it
            switch(true){
                case is_int($value):
                    $type = PDO::PARAM_INT;
                break;
                case is_bool($value):
                    $type = PDO::PARAM_BOOL;
                break;
                case is_null($value):
                    $type = PDO::PARAM_NULL;
                break;
                default:
                    $type = PDO::PARAM_STR;
                break;
            }
        }

        // Bind the parameter to the stmt
        $this->_pstmt->bindValue($param, $value, $type);

    }

    // Execute
    public function execute(){
        $this->_pstmt->execute();
    }

    // Return multiple records
    public function resultSet() {
        return $this->_pstmt->fetchAll(PDO::FETCH_CLASS, $this->_className);
    }

    public function getResults() {
        return $this->_pstmt->fetchAll();
    }

    //Return when expecting one object back
    public function singleResult(){
        $this->_pstmt->setFetchMode(PDO::FETCH_CLASS, $this->_className);
        return $this->_pstmt->fetch(PDO::FETCH_CLASS);
    }

    //Return when expecting one object back
    public function getResult(){
        // $this->_pstmt->setFetchMode(PDO::FETCH_CLASS, $this->_className);
        return $this->_pstmt->fetch();
    }

    // Return the primary key that was generated by the system
    public function lastInsertKey(){
        return $this->_dbh->lastInsertId();
    }

    // Return affected rows
    public function rowCount(){
        return $this->_pstmt->rowCount();
    }

}


?>